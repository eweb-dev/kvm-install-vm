#!/bin/bash

# Set program name variable
prog=$0

function usage {
    echo "usage: $prog [OPTIONS] [-n vmname] [-r vmname]"
    echo ""
    echo "OPTIONS"
    echo "  -c          Number of vCPUs     (default: 1)"
    echo "  -m          Memory Size (MB)    (default: 1024)"
    echo "  -d          Disk Size (GB)      (default: 10)"
    echo "  -t          Linux Distribution  (default: centos7)"
    echo "  -l          Location of Images  (default: /var/lib/libvert/images)"
    echo "  -k          SSH Public Key      (default: /root/.ssh/id_rsa.pub)"
    echo "  -b          Bridge              (default: br0)"
    echo "  -s          Static IP Address   (default: DHCP)"
    echo "  -h          Display help"
    echo "  -i          Custom QCOW2 Image"
    echo "  -n vmname   Name of VM to create"
    echo "  -r vmname   Name of VM to delete"
    echo ""
    echo "DISTRIBUTIONS"
    echo " - centos7"
    echo " - centos6"
    echo ""
    echo "EXAMPLES"
    echo ""
    echo "Create VM with default params:"
    echo "  $prog -n foo"
    echo ""
    echo "Create VM with custom params:"
    echo "  $prog -c 2 -m 2048 -d 20 -s 10.20.1.99 -n foo"
    echo ""
    echo "Remove (destroy and undefine) a VM:"
    echo "  $prog -r foo"
}

# Reset OPTIND
OPTIND=1

#--------------------------------------------------
# Defaults are set here.
# Override using command line arguments.
#--------------------------------------------------

CPUS=1                          # Number of virtual CPUs
MEMORY=1024                     # Amount of RAM in MB
DISK_SIZE=10                    # Disk Size in GB
RESIZE_DISK=false               # Resize disk (boolean)
IMAGEDIR=/var/lib/libvirt/images # Directory to store images
BRIDGE=br0                      # Hypervisor bridge
PUBKEY=/root/.ssh/id_rsa.pub    # SSH public key
DISTRO=centos7                  # Distribution

#--------------------------------------------------
# Parse command line arguments
#--------------------------------------------------

while getopts ":c:m:d:t:l:k:b:n:r:i:s:h" opt; do
    case "$opt" in
        c   ) CPUS="${OPTARG}" ;;
        m   ) MEMORY="${OPTARG}" ;;
        t   ) DISTRO="${OPTARG}" ;;
        l   ) IMAGEDIR="${OPTARG}" ;;
        n   ) VMNAME="${OPTARG}" ;;
        k   ) PUBKEY="${OPTARG}" ;;
        b   ) BRIDGE="${OPTARG}" ;;
        s   ) STATICIP="${OPTARG}" ;;
        i   ) IMAGE="${OPTARG}" ;;
        r   ) VMDEL="${OPTARG}" ;;
        d   )
            if [ "${OPTARG}" -gt ${DISK_SIZE} ]; then
                DISK_SIZE="${OPTARG}G"
                RESIZE_DISK=true
            else
                DISK_SIZE="${DISK_SIZE}G"
            fi
            ;;
        h|* ) usage; exit 1 ;;
    esac
done

shift $((OPTIND-1))

# Can't specify both -n and -r together
if [ ! -z "${VMNAME+x}" ] && [ ! -z "${VMDEL+x}" ]
then
    echo "-n and -r are mutually exclusive."
    exit 2
fi

function delete_vm {
    VM=$1
    echo "$(date -R) Destroying ${VM} domain..."
    virsh destroy ${VM} > /dev/null 2>&1
    echo "$(date -R) Destroying ${VM} storage pool..."
    virsh pool-destroy ${VM} > /dev/null 2>&1
    echo "$(date -R) Undefining ${VM} storage pool..."
    virsh pool-undefine ${VM} > /dev/null 2>&1
    echo "$(date -R) Undefining ${VM} domain..."
    virsh undefine ${VM} > /dev/null 2>&1

    echo "$(date -R) Deleting ${VM} files..."
    rm -rf $IMAGEDIR/$VM
}

# Delete VM if -r is set
if [ ! -z "${VMDEL+x}" ]
then
    delete_vm ${VMDEL}
    exit 0
fi

# VMNAME must be set
if [ -z "${VMNAME+x}" ]
then
    echo "You must specify a name for the VM with -n. Use -h to see usage."
    exit 2
fi

function fetch_images {
    case "$DISTRO" in
        centos7 ) QCOW=CentOS-7-x86_64-GenericCloud.qcow2 ;;
        centos6 ) QCOW=CentOS-6-x86_64-GenericCloud.qcow2 ;;
        debian8 ) QCOW=debian-8-20170521-openstack-amd64.qcow2 ;;
        *       ) usage; exit 2 ;;
    esac

    mkdir -p ${IMAGEDIR}

    if [ "${DISTRO}" == "centos7" ]
    then
        OS_VARIANT="centos7.0"
        CENTOS7_URL=https://cloud.centos.org/centos/7/images
        LOGIN_USER=centos
        if [ ! -f ${IMAGEDIR}/${QCOW} ]
        then
            echo "$(date -R) Cloud image not found.  Downloading..."
            wget -P ${IMAGEDIR} ${CENTOS7_URL}/${QCOW}
        fi
    elif [ "${DISTRO}" == "centos6" ]
    then
        OS_VARIANT="centos6.9"
        CENTOS6_URL=https://cloud.centos.org/centos/6/images
        LOGIN_USER=centos
        if [ ! -f ${IMAGEDIR}/${QCOW} ]
        then
            echo "$(date -R) Cloud image not found.  Downloading..."
            wget -P ${IMAGEDIR} ${CENTOS6_URL}/${QCOW}
        fi
    elif [ "${DISTRO}" == "debian8" ]
    then
        OS_VARIANT="debian8"
        DEBIAN8_URL=https://cdimage.debian.org/cdimage/openstack/current-8
        LOGIN_USER=debian
        if [ ! -f ${IMAGEDIR}/${QCOW} ]
        then
            echo "$(date -R) Cloud image not found.  Downloading..."
            wget -P ${IMAGEDIR} ${DEBIAN8_URL}/${QCOW}
        fi
    fi

    IMAGE=${IMAGEDIR}/${QCOW}
}

function check_ssh_key {
    if [ ! -f "${PUBKEY}" ]
    then
        echo "$(date -R) [ERROR] Please generate an SSH keypair using 'ssh-keygen -t rsa' or specify one with the "-k" flag."
        exit 3
    else
        KEY=$(<${PUBKEY})
    fi
}

# cloud-init variables
USER_DATA=user-data
META_DATA=meta-data
CI_ISO=${VMNAME}-cidata.iso

# Call functions
check_ssh_key

if [ ! -z "${IMAGE+x}" ]
then
    echo "$(date -R) Using custom QCOW2 image: ${IMAGE}."
    OS_VARIANT="auto"
    LOGIN_USER="<use the default account in your custom image>"
else
    fetch_images
fi

# Check if domain already exists
virsh dominfo ${VMNAME} > /dev/null 2>&1

if [ "$?" -eq 0 ]; then
    echo -n "[WARNING] ${VMNAME} already exists.  "
    read -p "Do you want to overwrite ${VMNAME} [y/N]? " -r
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        delete_vm ${VMNAME}
    else
        echo -e "\nNot overwriting ${VMNAME}. Exiting..."
        exit 1
    fi
fi

# Start clean
rm -rf ${IMAGEDIR}/${VMNAME}
mkdir -p ${IMAGEDIR}/${VMNAME}

pushd ${IMAGEDIR}/${VMNAME} > /dev/null

    # Create log file
    touch ${VMNAME}.log

    # cloud-init config: set hostname, remove cloud-init package,
    # and add ssh-key 
    cat > $USER_DATA << _EOF_
#cloud-config

# Hostname management
preserve_hostname: False
hostname: ${VMNAME}
fqdn: ${VMNAME}.example.local

# Configure where output will go
output: 
  all: ">> /var/log/cloud-init.log"

# configure interaction with ssh server
ssh_genkeytypes: ['ed25519', 'rsa']

# Install my public ssh key to the first user-defined user configured 
# in cloud.cfg in the template (which is centos for CentOS cloud images)
ssh_authorized_keys:
  - ${KEY}

runcmd:
  # Restart network to update IP config
  - systemctl restart network
  # Remove cloud-init when finished with it
  - [ yum, -y, remove, cloud-init ]
_EOF_

cat >> $USER_DATA << _EOF_

write_files:
  - content: |
      DEVICE="eth0"
      BOOTPROTO="static"
      IPADDR="${STATICIP}"
      NETMASK="255.255.255.0"
      GATEWAY="10.20.1.1"
      ONBOOT="yes"
      TYPE="Ethernet"
      USERCTL="yes"
      PEERDNS="yes"
      IPV6INIT="no"
      PERSISTENT_DHCLIENT="1"
    owner: root:root
    path: /etc/sysconfig/network-scripts/ifcfg-eth0
    permission: '0644'

_EOF_

    echo "instance-id: ${VMNAME}; local-hostname: ${VMNAME}" > $META_DATA

    echo "$(date -R) Copying cloud image ($(basename ${IMAGE}))..."
    DISK=${VMNAME}.qcow2
    cp $IMAGE $DISK
    if $RESIZE_DISK
    then
        echo "$(date -R) Resizing the disk to $DISK_SIZE..."
        qemu-img create -f qcow2 -o preallocation=metadata $DISK.new $DISK_SIZE >> ${VMNAME}.log 2>&1
        virt-resize --quiet --expand /dev/sda1 $DISK $DISK.new >> ${VMNAME}.log 2>&1
        mv $DISK.new $DISK
    fi

    # Create CD-ROM ISO with cloud-init config
    echo "$(date -R) Generating ISO for cloud-init..."
    genisoimage -output $CI_ISO -volid cidata -joliet -r $USER_DATA $META_DATA &>> ${VMNAME}.log

    echo "$(date -R) Installing the domain and adjusting the configuration..."
    echo "[INFO] Installing with the following parameters:"
    echo "    virt-install \\"
    echo "      --import \\"
    echo "      --name ${VMNAME} \\"
    echo "      --ram ${MEMORY} \\"
    echo "      --vcpus ${CPUS} \\"
    echo "      --disk $DISK,format=qcow2,bus=virtio \\"
    echo "      --disk $CI_ISO,device=cdrom \\"
    echo "      --network bridge=${BRIDGE},model=virtio \\"
    echo "      --os-type=linux \\"
    echo "      --os-variant=${OS_VARIANT} \\"
    echo "      --graphics none \\"
    echo "      --noautoconsole "

    virt-install --import \
        --name ${VMNAME} \
        --ram ${MEMORY} \
        --vcpus ${CPUS} \
        --disk $DISK,format=qcow2,bus=virtio \
        --disk $CI_ISO,device=cdrom \
        --network bridge=${BRIDGE},model=virtio \
        --os-type=linux \
        --os-variant=${OS_VARIANT} \
        --graphics none \
        --noautoconsole

    RET=$?
    if [ "$RET" -ne 0 ]; then
        echo "[ERROR] virt-install failed."
        exit 3
    fi
    virsh dominfo ${VMNAME} >> ${VMNAME}.log 2>&1

    # Eject cdrom
    echo "$(date -R) Cleaning up cloud-init..."
    virsh change-media ${VMNAME} hda --eject --config >> ${VMNAME}.log

    # Remove the unnecessary cloud init files
    rm $USER_DATA $META_DATA $CI_ISO

    echo "$(date -R) DONE. SSH to ${VMNAME} using ${STATICIP} with  username '${LOGIN_USER}'."

popd > /dev/null
